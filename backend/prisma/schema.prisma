generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String              @id @default(uuid())
  name         String?
  email        String              @unique
  password     String
  profileImage String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  Address      Address?            @relation("userAddress")
  messages     Message[]
  createdPlans TravelPlan[]        @relation("UserToTravelPlan")
  travelPlans  TravelPlanMembers[]

  // relationship
  sender       Friend[]           @relation("SentFriendRequests")
  reciever     Friend[]           @relation("ReceivedFriendRequests")
}

model Address {
  id      String @id @default(uuid())
  city    String
  country String
  pincode String
  userId  String @unique
  user    User   @relation("userAddress", fields: [userId], references: [id])
}

model TravelPlan {
  id          String              @id @default(uuid())
  destination String
  travelDate  DateTime
  timeSlot    String
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  createdById String
  messages    Message[]
  user        User                @relation("UserToTravelPlan", fields: [createdById], references: [id])
  members     TravelPlanMembers[]
}

model TravelPlanMembers {
  memberId     String
  travelPlanId String
  user         User       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@id([memberId, travelPlanId])
}

model Message {
  id        String     @id @default(uuid())
  type      String?
  content   String
  senderId  String
  roomId    String
  createdAt DateTime   @default(now())
  room      TravelPlan @relation(fields: [roomId], references: [id])
  sender    User       @relation(fields: [senderId], references: [id])
}

model Friend {
  id          Int    @id @default(autoincrement())
  isAccepted  Boolean  @default(false)
  senderID    String
  recieverId  String
  sender      User   @relation( "SentFriendRequests" , fields: [senderID], references: [id])
  recievedBy  User   @relation( "ReceivedFriendRequests" , fields: [recieverId], references: [id])
  
  @@unique([senderID , recieverId])
}
